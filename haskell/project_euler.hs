--Problem 1 -----------------------------------------------------------------
--
--If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. 
--The sum of these multiples is 23.
--Find the sum of all the multiples of 3 or 5 below 1000

multsThreeAndFive :: (Integral a) => a -> [a]
multsThreeAndFive n = [x | x <- [1..n-1], (x `mod` 3 == 0) || (x `mod` 5 == 0)]

-- Curry this multsOf funtion?
multsOf :: (Integral a) => a -> a -> [a]
multsOf d n = [x | x <- [1..n-1], x `mod` d == 0]

-- TODO: pattern doesn't catch type a, only [a]
sum' [] = 0
sum' (x:xs) = x + sum' xs


--Problem 2 -----------------------------------------------------------------
--
--Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
--By starting with 1 and 2, the first 10 terms will be:
--1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
--By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
--find the sum of the even-valued terms.

--fibonacci 0 = 0
--fibonacci 1 = 1
--fibonacci n = fibonacci (n - 1) + fibonacci (n - 2);

--Generate an infinite list of fibonaci numbers
fib = 1:2:zipWith (+) fib (tail fib)

